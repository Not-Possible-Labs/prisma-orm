// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String        @id @default(cuid())
  email         String        @unique
  name          String?
  username      String?       @unique
  phone         String?       @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  isSuspended   Boolean       @default(false)
  suspendedAt   DateTime?
  isBanned      Boolean       @default(false)
  bannedAt      DateTime?
  banReason     String?
  sessions      Session[]
  accounts      Account[]
  reports       UserReport[]  @relation("ReportedUser")
  reportsFiled  UserReport[]  @relation("ReportingUser")
  gameHistory   GameHistory[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model UserReport {
  id          String   @id @default(cuid())
  reportedId  String
  reporterId  String
  reason      String
  description String?
  status      String   @default("PENDING") // PENDING, RESOLVED, DISMISSED
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  reported    User     @relation("ReportedUser", fields: [reportedId], references: [id])
  reporter    User     @relation("ReportingUser", fields: [reporterId], references: [id])

  @@map("user_report")
}

enum GameType {
  STANDARD
  CHESS960
}

enum GameResult {
  WIN
  LOSS
  DRAW
}

model GameHistory {
  id          String     @id @default(cuid())
  userId      String
  gameType    GameType
  wagerAmount Decimal?
  result      GameResult
  startedAt   DateTime
  endedAt     DateTime?
  createdAt   DateTime   @default(now())
  user        User       @relation(fields: [userId], references: [id])

  @@map("game_history")
}
